{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/logger.ts"],
  "sourcesContent": ["import \"dotenv/config\";\nimport type { AddressInfo } from \"node:net\";\nimport { clerkClient, clerkPlugin, getAuth } from \"@clerk/fastify\";\nimport { PrismaClient } from \"@prisma/client\";\nimport Fastify from \"fastify\";\nimport { logger } from \"./utils/logger\";\n\nconst prisma = new PrismaClient();\nconst server = Fastify({\n\tlogger: logger,\n});\n\nserver.register(clerkPlugin);\n\nserver.get(\"/users\", async (req, reply) => {\n\tconst users = await prisma.user.findMany();\n\treply.send(users);\n});\n\nserver.get(\"/\", (req, reply) => {\n\treply.send({ hello: \"wasup!\" });\n});\n\nserver.get(\"/protected\", async (req, reply) => {\n\ttry {\n\t\tconst { userId } = getAuth(req);\n\n\t\tif (!userId) {\n\t\t\treturn reply.code(401).send({ error: \"User not found\" });\n\t\t}\n\n\t\tconst user = userId ? await clerkClient.users.getUser(userId) : null;\n\n\t\treturn reply.send({ message: \"User authenticated successfully\", user });\n\t} catch (err) {\n\t\tserver.log.error(err);\n\t\treturn reply.code(500).send({ error: \"Failed to authenticate user\" });\n\t}\n});\n\nconst start = async () => {\n\ttry {\n\t\tawait server.listen({\n\t\t\tport: (process.env.PORT || 3000) as number,\n\t\t});\n\t\tserver.log.info(\n\t\t\t`Server is now listening on port ${(server.server.address() as AddressInfo).port}`,\n\t\t);\n\t} catch (err) {\n\t\tserver.log.error(err);\n\t\tprocess.exit(1);\n\t}\n};\n\nstart();\n", "export const logger =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? {\n\t\t\t\ttransport: {\n\t\t\t\t\ttarget: \"pino-pretty\",\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tignore: \"pid,hostname\",\n\t\t\t\t\t\tcolorize: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t: true;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAO;AAEP,qBAAkD;AAClD,oBAA6B;AAC7B,IAAAA,kBAAoB;;;ACJb,IAAM,SACZ,QAAQ,IAAI,aAAa,eACtB;AAAA,EACA,WAAW;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,MACR,QAAQ;AAAA,MACR,UAAU;AAAA,IACX;AAAA,EACD;AACD,IACC;;;ADJJ,IAAM,SAAS,IAAI,2BAAa;AAChC,IAAM,aAAS,gBAAAC,SAAQ;AAAA,EACtB;AACD,CAAC;AAED,OAAO,SAAS,0BAAW;AAE3B,OAAO,IAAI,UAAU,OAAO,KAAK,UAAU;AAC1C,QAAM,QAAQ,MAAM,OAAO,KAAK,SAAS;AACzC,QAAM,KAAK,KAAK;AACjB,CAAC;AAED,OAAO,IAAI,KAAK,CAAC,KAAK,UAAU;AAC/B,QAAM,KAAK,EAAE,OAAO,SAAS,CAAC;AAC/B,CAAC;AAED,OAAO,IAAI,cAAc,OAAO,KAAK,UAAU;AAC9C,MAAI;AACH,UAAM,EAAE,OAAO,QAAI,wBAAQ,GAAG;AAE9B,QAAI,CAAC,QAAQ;AACZ,aAAO,MAAM,KAAK,GAAG,EAAE,KAAK,EAAE,OAAO,iBAAiB,CAAC;AAAA,IACxD;AAEA,UAAM,OAAO,SAAS,MAAM,2BAAY,MAAM,QAAQ,MAAM,IAAI;AAEhE,WAAO,MAAM,KAAK,EAAE,SAAS,mCAAmC,KAAK,CAAC;AAAA,EACvE,SAAS,KAAK;AACb,WAAO,IAAI,MAAM,GAAG;AACpB,WAAO,MAAM,KAAK,GAAG,EAAE,KAAK,EAAE,OAAO,8BAA8B,CAAC;AAAA,EACrE;AACD,CAAC;AAED,IAAM,QAAQ,YAAY;AACzB,MAAI;AACH,UAAM,OAAO,OAAO;AAAA,MACnB,MAAO,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AACD,WAAO,IAAI;AAAA,MACV,mCAAoC,OAAO,OAAO,QAAQ,EAAkB,IAAI;AAAA,IACjF;AAAA,EACD,SAAS,KAAK;AACb,WAAO,IAAI,MAAM,GAAG;AACpB,YAAQ,KAAK,CAAC;AAAA,EACf;AACD;AAEA,MAAM;",
  "names": ["import_fastify", "Fastify"]
}
